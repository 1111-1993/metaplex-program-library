/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category ThawNft
 * @category generated
 */
const thawNftStruct = new beet.BeetArgsStruct<{ instructionDiscriminator: number[] /* size: 8 */ }>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ThawNftInstructionArgs',
);
/**
 * Accounts required by the _thawNft_ instruction
 *
 * @property [_writable_] freezePda
 * @property [_writable_] candyMachine
 * @property [_writable_] tokenAccount
 * @property [] owner
 * @property [] mint
 * @property [] edition
 * @property [_writable_, **signer**] payer
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category ThawNft
 * @category generated
 */
export type ThawNftInstructionAccounts = {
  freezePda: web3.PublicKey;
  candyMachine: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  owner: web3.PublicKey;
  mint: web3.PublicKey;
  edition: web3.PublicKey;
  payer: web3.PublicKey;
  tokenMetadataProgram: web3.PublicKey;
};

const thawNftInstructionDiscriminator = [92, 44, 210, 187, 172, 6, 64, 183];

/**
 * Creates a _ThawNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ThawNft
 * @category generated
 */
export function createThawNftInstruction(accounts: ThawNftInstructionAccounts) {
  const {
    freezePda,
    candyMachine,
    tokenAccount,
    owner,
    mint,
    edition,
    payer,
    tokenMetadataProgram,
  } = accounts;

  const [data] = thawNftStruct.serialize({
    instructionDiscriminator: thawNftInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: freezePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: owner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: edition,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'),
    keys,
    data,
  });
  return ix;
}
