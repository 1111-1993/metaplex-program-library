/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category SetFreeze
 * @category generated
 */
const setFreezeStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'SetFreezeInstructionArgs',
);
/**
 * Accounts required by the _setFreeze_ instruction
 *
 * @property [_writable_] candyMachine
 * @property [_writable_, **signer**] authority
 * @property [_writable_] freezePda
 * @category Instructions
 * @category SetFreeze
 * @category generated
 */
export type SetFreezeInstructionAccounts = {
  candyMachine: web3.PublicKey;
  authority: web3.PublicKey;
  freezePda: web3.PublicKey;
};

const setFreezeInstructionDiscriminator = [202, 80, 109, 208, 130, 144, 26, 233];

/**
 * Creates a _SetFreeze_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category SetFreeze
 * @category generated
 */
export function createSetFreezeInstruction(accounts: SetFreezeInstructionAccounts) {
  const { candyMachine, authority, freezePda } = accounts;

  const [data] = setFreezeStruct.serialize({
    instructionDiscriminator: setFreezeInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: candyMachine,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: freezePda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ'),
    keys,
    data,
  });
  return ix;
}
